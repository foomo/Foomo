++Caching resources using the Foomo Cache API


+++ Preface
The Foomo cache is a general purpose caching API implementation of the pass-through type (if a cached value exists it returns it, if it does not exist the value is calculated, cached and returned).
Two distinct features distinguish it from common  cache implementations:
* The Foomo cache API was specifically designed for caching resources that are linked by dependency relationships
* The Foomo API provides mechanisms to explore the cached resources and their relationships. The ability to query for cached object allows for very tight control over single resources as well as dependency trees.

The Foomo cache has the ability to propagate operations, such as resource re-creation, from a single object at the top of the hierarchy to all its dependent (child) objects and further down the tree, until the
operation is applied to a whole set of objects belonging to a whole dependency tree.


+++ Terminology

* Logical resource dependency - cached resources A has a logical dependency to resource B if the method call that returns A internally calls the method that computes B.

* Physical Resource dependency - cached resource A has a physical dependency to resource B if the resources are logically dependent and their respectie method calls share a set of method parameters with same name and same value.

* Dependency tree: A set of dependent resources structured into a tree data structure, where child resources (object values) depend on their parent resource (tree node), i.e. if the parent resource changes this affects the child resource.

* Proxy: The proxy class is the main entry point into the Foomo cache. Used to seamlessly integrate caching into applications.

* Persistor: A class being delegated the actual persistence and retrieval of cached objects. Foomo distinguished fast and quaryable persistor implementations.

* Manager: The class that implements cache resource operations including load, save, delete and query.

* Invalidator: The class that is used to crawl the dependency tree and apply operations to all constituting nodes.

* Queryable cache: a persistent cache that provides mechanisms for querying the cached resources fast cache: a (not necessarily persistent) cache that provides fast resource storage and retrieval. Does not provide the means


+++ Basic assumptions and conventions
There three implicit assumptions one must be aware of when caching resources using the Foomo cache:

# Cache resources are assumed to be PHP objects returned by method calls. This implies method calls **MUST be stateless** (restful). In other words the method return value must not change for subsequent calls with equal parameters.
# Foomo uses annotations to describe cache resources and their dependencies. A method call can be cached if it is annotated with the **//@Foomo\Cache\CacheResourceDescription//** annotation
# The Foomo cache inferes method parameter types from **//PHPDoc @param//** comments. For caching to work, the cached method **MUST** be fully PHPDoc annotated.

+++ How to cache

Let us assume a simple PHP class WorkerClass with method **somethingVerySlow()** that takes no parameters:

<geshi type="php">
class WorkerClass {
	public static function somethingVerySlow() {
		//compute ret ... this takes very long
		$ret=...
		//return
		return $ret;
	}
}
</geshi>

The method call to  **//somethingVerySlow()//** can be cached by adding the **//@Foomo\Cache\CacheResourceDescription//** annotation as follows. Note that the method does not need to be modified to apply caching.

<geshi type="php">
...
	/**
     * @Foomo\Cache\CacheResourceDescription
     *
     */

	public static function somethingVerySlow() {...
...
}
</geshi>

The method call to **//somethingVerySlow()//** can now be seamlessly be cached by calling the method using the **//Proxy//** (\Foomo\Cache\Proxy) class.
<geshi type="php">
...
	$returnedValue = Proxy::call('WorkerClass','somethingVerySlow',array());
...
}
</geshi>

The **//call()//** method on **//Proxy//** in the above example accepts three parameters:
* class name or object, on which the method is called,
* name of the method to call,
* array containing method parameters.

Internaly the **//Proxy::call()//** method calls the method to be cached, retrieves the return value and saves it in the cache. For all subsequent calls to the same method, the cached value is retrieved and returned without the need to call the method again.


+++ Annotations
Although example with the **//somethingVerySlow()//** method demonstrated how to implement caching of method calls, it obscured several importanet details.
More specifically there are four distinct attributes that can be specified with the @Foomo\Cache\CacheResourceDescription annotation, that were omitted in the mentioned example:

* lifeTime - the time in seconds, after which a cached resource expires in the persistent cache. Default value is 0, meaning resource never expires

* lifeTimeFast - the time in seconds, after which a cached resource expires in the fast cache. Default value is 0, meaning resource never expires

* invalidationPolicy - the policy used for invalidation of dependent objects. For more information see section "Resource invalidation". Default value is 'POLICY_INSTANT_REBUILD'

* dependencies - list of cache resources, on which the annotated resource depends upon. This expresses logical resource dependencies. For more information see section "Cache resource dependencies". Default value is empty meaning resource does not depend o oter resources.

As mentioned **//PHPDoc @param//** annotations are an essential part of the method annotation and **MUST** be present for all method parameters whenever the method is annotated with **//@Foomo\Cache\CacheResourceDescription//**. Omitting the **//PHPDoc @param//** tags for cached methods will result in unpredictable cache behavior and possibly runtime errors.
A more comprehensive example of method annotations is provided below.

<geshi type="php">
namespace Foomo\Cache\MockObjects;

class SampleResources {
	/**
	 * @Foomo\Cache\CacheResourceDescription('invalidationPolicy' = 'POLICY_INSTANT_REBUILD')
	 *
	 * @param integer $timestamp
	 * @param string $location
	 *
	 * @return array
	 */
	public function getHoroscopeData($timestamp, $location) {}

	/**
	 * @Foomo\Cache\CacheResourceDescription
	 *
	 * @param string $personName
	 */
	public function getAddress($personName) {...}

	/**
	 * @Foomo\Cache\CacheResourceDescription('dependencies'='Foomo\Cache\MockObjects\SampleResources->getHoroscopeData')
	 *
	 * @param integer $timestamp
	 * @param string $location
	 * @param string $template
	 * @return string
	 */
	public function renderHoroscope($timestamp, $location, $template) {
		...
		//a call to getHoroscopeData from inhere
		\Foomo\Cache\Proxy::call($this, 'getHoroscopeData', array($timestamp, $location));...}
		...
	
	/**
	 * @Foomo\Cache\CacheResourceDescription('lifeTimeFast' = 10000, 'dependencies'='Foomo\Cache\MockObjects\SampleResources->renderHoroscope, Foomo\Cache\MockObjects\SampleResources->getAddress')
	 *
	 * @param integer $timestamp
	 * @param string $location
	 * @param string $template
	 * @param string $personName
	 * @return string
	 *
	 */
	public function sendHosroscopeRendering($timestamp, $location, $template, $personName) {
		...
		//a call to renderHoroscope from inhere
		\Foomo\Cache\Proxy::call($this, 'renderHoroscope', array($timestamp, $location, $template));
		//a call to getAddress from inhere
		\Foomo\Cache\Proxy::call($this, 'getAddress', array($personName));
		...
	}
}
</geshi>


+++ Cache resource dependencies

The last example shows a class with three methods. Methods  renderHoroscope(...) and sendHoroscope(..) have a logical dependency to method  getHoroscopeData(). Method sendHoroscope has a logical dependency to method getAddress().

The logical dependency tree for the above example with getAddress at the top looks as follows:

* Foomo\Cache\MockObjects\SampleResources->getAddress
 * Foomo\Cache\MockObjects\SampleResources->sendHosroscopeRendering

The logical dependency tree for the above example with getHoroscopeData at the top is the following:

* Foomo\Cache\MockObjects\SampleResources->getHoroscopeData
 * Foomo\Cache\MockObjects\SampleResources->renderHoroscope
  * Foomo\Cache\MockObjects\SampleResources->sendHosroscopeRendering


Dependencies of cached resources in the cache are however not logical but physical, i.e. a cache resource A depends on a particular other resource B when the B is used for the computation of A. Since the resource computation depends on method parameters, the physical dependence is established for common parameters with the same value.
In the above example a resource representing the return value of renderHoroscope($timestamp, $location, $template) physically depends on the return value of getHoroscopeData($timestamp, $location)
when common parameters //$timestamp// and //$location// are equal, i.e. the return value of renderHoroscope(12345667, 'Berlin', 'some template'); depends on getHoroscopeData(12345667, 'Berlin').

The Foomo caching API does not use annotation to define common parameters. Instead, a convention is used: **common parameters MUST be called with the same name**.

Note, if for example, method **//renderHoroscope()//** was defined as **//renderHoroscope($timeOfInterest, $where, $template)//**, the Foomo cache would not establish a physical dependency of **//renderHoroscope()//** to **//getHoroscopeData()//**.


+++ What are cache resources

Cache resources are wrapper objects that hold the return value of the cached method. In addition to the value, the cache resource object contains the following fields:

* name - the name of the resource that consists of the class name a delimiter and the method name. The delimiter equals :: for s static method call and -> for a call on an object. An example resource name would be **// MyNamespace\MyClassName->myMethod//**.

* id - unique resource identifier. A 32 chars string being an md5 of a concatenation of the resourceName and serialized method parameter values. For cases where serialization of a parameter is expensive, it is advised to implement the __toString() method on the parameter object as this will be used in the computation of the id if present.

* status - VALID or INVALID. If it is invalid the cached resource value will not be returned by the Proxy call method. Instead the value will be computed again by calling the source method and cached again.

* expirationTime - timestamp describing the time at which the cached resource will expire in the queryable cache. This is equivalent as being INVALID, although the status flag will not be set for expiration.

* expirationTimeFast - equivalent to expirationTime, but for the fast cache.

* hits - the number of times the a resource has been read from the cache. Note that this feature can be expensive and hence counting hits is turned off by default.

* sourceClass -  the source class

* sourceMethod - the source method

* isStaticCall - true if method call that produced the resource is static

* properties - an asociative array of method parameters (propName => propValue)


+++ Cache invalidation

Cache invalidation is a process that modifies a whole (physical) dependency tree of cached resources whenever the root resource is modified, i.e. saved (or the
action is programmatically triggered). The process of invalidation is one of the highlights of the Foomo cache.

Whenever a Proxy call identifies a cached resource with status INVALID or that has expired, it creates a new one and saves the newly created one to the cache using the **//\Foomo\Cache\Manager //** save method class. This could potentially lead to cache inconsistency if there were other cached objects that were depending on the newly created resource.
To avoid inconsistency, the Manager class delegates the invalidation of depending objects to the \Foomo\Cache\Invalidator class.

Invalidation essentially builds a dependency tree and traverses it in full depth. All depending objects (those have an an annotated dependency and have same parameter values) are then updated based on the invalidation policy used.
The Foomo cache uses the following invalidation policies:

* POLICY_INSTANT_REBUILD - a depending object is re-created during invalidation. This is the default invalidation behaviour. Note that in some cases this could be a lengthy process.

* POLICY_INVALIDATE - the status of depending objects is set to INVALID. This operation is faster, but the cached objects will need to be re-created next time they are requested.

* POLICY_DELETE - all depending objects will be deleted. Objects are not cached anymore an will need to be re-created when next requested.

* POLICY_DO_NOTHING - this policy leaves dependent objects as they are. This is used only for testing and should not be applied, unless you know exactly what you are doing. **Applynig this policy leads to cached resource inconsistencies!*



+++ The Fast and Queryable caches

Creating caches is a very expensive task. Hence, it is too risky to use a fast regular cache like memcached, because data will be lost when it needs a restart.

Filesystem driven caches on the other hand tend to be slow, but they are safe(r).

Therefore the Foomo cache API has a cache architecture, that supports two levels of cache. One levels is safe, the other one is fast. The caching implementation handles uploading of cached objects from the safe to the fast level automatically, \
when information gets lost on the fast level.

Furthermore, the filesystem based cache provides the ability to query cached resources, allowing for tight control over cached resources.

The two levels of caching are implemented is implemented as fast (\Foomo\Cache|Persistence\FastPersistorInterface)  and queryable (\Foomo\Cache|Persistence\QueryablePersistorInterface) persistors.

The default implementation of the fast persistor in Foomo is based on APC, while the queryable persitor uses a MySQL database. By implementing the persistor interface, it is possible to use other, user provided persistence mechanisms.



+++ Cache setup

The Foomo cache is setup by adding the configuration to the apache vhost.conf file. For example, the following example shows a cache configuration that uses apc for the fast cache and PDOPersistor (cached resources are stored in mysql MYISAM tables) as queryable cache.

<geshi type="text">
SetEnv "FOOMO_CACHE_FAST" "apc"
SetEnv "FOOMO_CACHE_QUERYABLE" "pdo::mysql://root:@127.0.0.1:3306/cacheFoomoframeworkTest"

</geshi>

To use the memcache based fast persistor, use a config line as follows in you vhosts.conf file. The actual memcache persistor implementation only supports a single memcache server.
<geshi type="text">
SetEnv "FOOMO_CACHE_FAST" "memcache::host=127.0.0.1,port=11211,persistent=true,weight=1,timeout=1,retry_interval=15,status=true"

</geshi>


+++ Bootstrapping the manager and reseting the resources

<geshi type="php">
// bootstraping the Manager using configs found in the Apache vhost.conf
Manager::bootstrap();

// reseting the fast and queryable cache  ... also recreates storage structures, e.g. tables
Manager::reset();


//using an domain config to bootstrap the Manager
$domainConfig = Foomo\Config::getConf(\Foomo\Module::NAME, \Foomo\Core\DomainConfig::NAME);
$fastPersistorConf = $domainConfig->fastPersistors['memcached'];
$queryablePersistorConf = $domainConfig->queryablePersistors['pdo'];
$fastPersistor = \Foomo\Cache\Manager::getPersistorFromConf($fastPersistorConf, false);
$queryablePersistor = \Foomo\Cache\Manager::getPersistorFromConf($queryablePersistorConf, true);

Manager::initialize($queryablePersistor, $fastPersistor);
Manager::reset();
</geshi>


+++ The Foomo cache API - usage examples
This section provides examples on how to manipulate cached resources through the Foomo cache API.

++++ Caching static and object method calls
<geshi type="php">
public function testCallStatic() {
	$obj = new \MyNamespace\MyClass;
	$result = Proxy::call($obj, 'myMethod', array('a', 'b'));
	...
}

public function testCallStatic() {
	$result = Proxy::call('\MyNamespace\MyClass', 'myStaticMethod', array('a', 'b'));
	...
}

</geshi>

++++ Obtaining an empty resource object
<geshi type="php">

public function emptyResourceForStaticCall() {
	$obj = new \MyNamespace\MyClass;
	$result = Proxy::getEmptyResource($obj, 'myMethod', array('a', 'b'));
	...
}

public function emptyResourceForCall() {
	$result = Proxy::getEmptyResource('\MyNamespace\MyClass', 'myStaticMethod', array('a', 'b'));
	...
}

// you can also get an empty resource by supplying the resource name
// the arguments are assumed to be an empty array
public function emptyResourceUsingResourceName() {
	$resourceName = '\MyNamespace\MyClass::myStaticMethod';
	$result = Proxy::getEmptyResourceFromResourceName(resourceName);
	...
}
</geshi>

++++ Loading, saving and deleting resources

<geshi type="php">
$resource = Proxy::getEmptyResource($obj, 'myMethod', array('a', 'b'));

//set the resource value.... le t us do what the Proxy class does internally
$resource->value = \call_user_func_array(array($obj, 'myMethod'), array('a', 'b'));



//save
// saving a resource through the Manager also invalidates all depending resources!
Manager::save($resource);

//load
$loadedResource = Manager::load($resource);

//delete
// deleting a resource through the Manager also invalidates (deletes) all depending resources!
$success = Manager::delete($resource);

</geshi>



++++ Loading, saving and deleting resources using the persistors directly

Unless you know what you are doing, avoid accessing the resources through the persistors as explained in this section. Direct access to the persistor does not invalidate depending resources.
This leads to inconsistencies in each cache as well as to inconsistencies between the fast and queryable cache.

<geshi type="php">

$fastPersistor = Manager::getFastPersistor();
$queryablePersistor = Manager::getQueryablePersistor();


//save
// saving a resource through the persistor does not invalidate depending resources!
$queryablePersistor->save($resource);

//load
$loaded = $queryablePersistor->load($resource);

//delete
// deleting a resource through the persistor does not invalidate (deletes) all depending resources!
$success = fastPersistor->delete($resource);

</geshi>




+++ Foomo cache expressions - the cache query language

Resources persisted using a queryable persistor can be queryed. The Foomo cache comprises a domain specific query language that can be used to create simple and complex queries.

A simple The Foomo expression consists of a condition such as 'resource id equals 123455667' or 'resource is valid'. An The Foomo expression is represented with the \Foomo\Cache\Persistence\Expr class.
Such simple expressions may be the aggregated using logical operators AND and OR to form complex queries.

A simple expression can be constructed by calling a static method on the Expr class.

For example an expression that represent a condition 'resource identifier equals' can be expressed as follows.

<geshi type="php">
	Expr::idEq('0987654321');
</geshi>


The following methods are available on the Expression class that can be used to form simple expressions.
<geshi type="php">
public static function idEq($id); //id equal
public static function idNe($id); //id not equal
public static function propEq($paramName, $paramValue); //property equal
public static function propNe($paramName, $paramValue); //property not equal
public static function propsEq($properties); //properties equal
public static function statusValid(); //status is valid
public static function statusInvalid(); // status is invalid
public static function isExpired($cache = 'queryable'); //resource is expired
public static function isNotExpired($cache = 'queryable'); //resource not expired
public static function createdBefore($timestamp); //created before a moment in time
public static function createdAfter($timestamp); // created after a moment in time
public static function hitsMoreThan($hits, $cache = 'queryable'); // resource loaded from the cache more times than
public static function hitsLessThan($hits, $cache = 'queryable'); // resource loaded from the cache less times than
public static function expirationAfter($expirationTime, $cache = 'queryable'); // resource will expire after
public static function expirationBefore($expirationTime, $cache = 'queryable'); // resource will expire before

</geshi>



++++ Finding resources with a particular resource Id

<geshi type="php">

	$resourceName = '\MyNamespace\MyClass::myStaticMethod';

	//resource id equals 0987...
	$expr = Expr::idEq('0987654321');

	//query using the Manager
	$resourceIterator = Manager::query($resourceName, $expr);

</geshi>


++++ Finding resources that are valid and not expired

In this example a complex expression is created by logically anding two simple expressions.

The example also demonstrates the use of the resource iterator returned by the MAnager's query method.

<geshi type="php">

	$resourceName = '\MyNamespace\MyClass::myStaticMethod';

	//resource is valid and not expired
	$expr = Expr::groupAnd(
						Expr::statusValid(),
						Expr::isNotExpired()
					);

	//query using the Manager
	$resourceIterator = Manager::query($resourceName, $expr);

	//dump the results
	foreach ($resourceIterator as $resource) {
		var_dump($resource->name . ' : ' . $resource->id);
	}

</geshi>




++++ Finding all resources with a particular name


<geshi type="php">

	$resourceName = '\MyNamespace\MyClass::myStaticMethod';


	//query using the Manager and supplying null as expression
	$resourceIterator = Manager::query($resourceName, null);

	//alternatively using the 'id not equals hack'
	$expr = Expr::idNe('this can never be an id');
	$resourceIterator = Manager::query($resourceName, $expr);

</geshi>


++++ Finding a resource (resources) where properties are equal to a supplied argument

The term properties refers to function arguments that were passed to the method that created the resource. Within the object representing a cached resource (objects of type \Foomo\Cache\CacheResource) the arguments are stored in an associative ($propName => $propValue) array called properties.


<geshi type="php">

	$resourceName = '\MyNamespace\MyClass::myStaticMethod';

	//create the resource and cache it by calling it through the Proxy call method
	$result = Proxy::call('\MyNamespace\MyClass','myStaticMethod', array($arg1, $arg2, ...));

	//get an empty resource, which will have the properties in an associative array that we can user for querying
	//note the arguments for getEmptyResource are the same as for call
	$emptyResource = Proxy::getEmptyResource('\MyNamespace\MyClass','myStaticMethod', array($arg1, $arg2, ...));

	//now let us find the resource
	$expr = Expr::propsEq($emptyResource->properties);

	//query using the Manager and supplying null as expression
	$resourceIterator = Manager::query($resourceName, $expr);

	//calling count on the iterator should result in 1
	if (count($resourceIterator) == 1){
		//thats the way it should be...
	}else {
		//this can actually never happen ;-)
	}

</geshi>


++++ Finding resources where a single property equals a supplied argument
<geshi type="php">
	...
	//create the resource and cache it by calling it through the Proxy call method
	$result = Proxy::call('\MyNamespace\MyClass','myStaticMethod', array($arg1, $arg2, ...));

	//look for it assuming myStatic method is defined as function myStaticMethod($timestamp, $somethingElse,....)
	$expr = Expr::propEq('timestamp', $arg1);

	$resourceIterator = Manager::query($resourceName, $expr);

</geshi>


++++ Fining all resources that will expire before a moment in time

<geshi type="php">

	$resourceName = '\MyNamespace\MyClass::myStaticMethod';
	$momentInTime = 12324353535; //unix timestamp
	$expr = Expr::expirationBefore($momentInTime);

	//query using the Manager
	$resourceIterator = Manager::query($resourceName, $expr);
	
</geshi>


++++ Findig resources that are invalid but have still not expired

<geshi type="php">
	$resourceName = '\MyNamespace\MyClass::myStaticMethod';
	$momentInTime = 12324353535; //unix timestamp
	
	$expr = Expr::groupAnd(
							Expr::statusInvalid();
							Expr::isNotExpired();
					);

	//query using the Manager
	$resourceIterator = Manager::query($resourceName, $expr);

</geshi>




++++ Findig resources that are either invalid or expired

<geshi type="php">
	$resourceName = '\MyNamespace\MyClass::myStaticMethod';
	
	$expr = Expr::groupOr(
							Expr::statusInvalid();
							Expr::isExpired();
					);

	//query using the Manager
	$resourceIterator = Manager::query($resourceName, $expr);

</geshi>

++++ Findig resources that are  invalid or expired for which the hit count is greater than 100

<geshi type="php">
	$resourceName = '\MyNamespace\MyClass::myStaticMethod';

	$expr = Expr::groupAnd(
						Expr::groupOr(
							Expr::statusInvalid();
							Expr::isExpired();
						),
			            Expr::hitsMoreThan(100)
				);

	//query using the Manager
	$resourceIterator = Manager::query($resourceName, $expr);

</geshi>


++++ Invalidating cached resources

Invalidation of cached resources is delegated to the Invalidator class. However, developers should access it through the MAnager class, which provides a somewhat more powerfull API for resource invalidation.

**Make sure you understand how the 'invalidateRoot' parameter works, since it may lead to cache inconsistencies when set to false.** This is the second parameter of the **//invalidate()//** method and third in **//invalidateWithQuery()//**.

<geshi type="php">
	//let us assume we have a resource already
	$resource = ...

	//this will invalidate the resource and all dependent resources
	Manager::invalidate($resource, true);

	//this will only invalidate the dependent resources but not the resource itself
	Manager::invalidate($resource, false);

	//this will inforce an invalidation policy which is different from the one specified in the $resource object
	Manager::invalidate($resource, true, Invalidator::POLICY_DELETE);

</geshi>

It is also possible to invalidate a larger number of resources that match a query.

<geshi type="php">

	$expr = Expr::propEq('propName',$propVal);

	//this will invalidate the resource and all dependent resources
	Manager::invalidateWithQuery($resource->name, $expr, true);

	//this will only invalidate the dependent resources but not the resource itself
	Manager::invalidateWithQuery($resource->name, $expr, false);

	//this will inforce an invalidation policy which is different from the one specified in the $resource object
	Manager::invalidateWithQuery($resource->name, $expr, true, Invalidator::POLICY_INSTANT_REBUILD);

</geshi>



+++ The cache frontend
The cache frontend provides access to aspects and operations of the cache. This includes:
* resource dependency tree
* cacheable resources by module list
* inspection of cached resources
* resource invalidation (single object and all resources with a resource name)
* cache reset
* population of the fast cache with resources from the queryable cache
* search for resources using expressions
* ...


+++ Summary
* The Foomo cache caches results of method calls
* Use the **//@Foomo\Cache\CacheDescription//** annotation when you want to cache method calls
* **//PHPDoc @param//** comments MUST be present in the cached method annotation
* In order to use caching perform method calls through the \Foomo\Cache\Proxy::call() method.
* Parameter names in dependent methods: equivalent parameters in dependent methods MUST be called with the same parameter name
* implement a __toString() method on method parameter objects to speed up resource id computation. __toString() is used instead of the objects serialized value if present. With some persistor implementations (PDOPersistor for example), implementing the __toString method might also speed up resource storage.

