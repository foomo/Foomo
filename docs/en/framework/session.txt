The standard php session puts an atomic lock on any php request using the \
session. As a result all parallel requests to the server are forced into a cue \
. This is a bad experience for the user and can lead to basically deadlocking \
server instances as they wait to obtain their lock on the session.

Foomos session is the result of a real world problem. We needed session access \
when streaming media through php and even with a very early call of \
session_commit(); we still did not get the results we wanted, because the \
standard php session needs to get a lock across parallel requests no matter \
what the session save handler is, since it always has to assume **write access \
as the default**.

So we wrote our own session. We assume **read access as the default**.

Let us take a look at the differences:

+++ php session example

Php´s session is incredibly easy to use:

<geshi type="php">
/**
 * just an example app
 */
class App {
	/**
	 * An incredibly powerful ORM, that you do not want to serialize in your 
	 * session, since serializing / unserializing would take forever
	 *
	 * @var SuperORM
	 */
	private $orm;
	/**
	 * @var User
	 */
	private $user;
	private function login()
	{
		$this->user = $this->getOrm()->loadUser();
	}
	public function __sleep()
	{
		return array('user');
	}
	private function getOrm()
	{
		if(!isset($this->orm)) {
			$this->orm = new SuperORM;
		}
		return $this->orm;
	}
	public function foo()
	{
		return 'foo with user :: ' . $this->user->name;
	}
	public function run()
	{
		switch($action) {
			case 'login':
				$this->login();
				break;
		}
	}
}

session_start();
if(!isset($_SESSION['app'])) {
	$_SESSION['app'] = new App;
}
$app->run();
</geshi>

In other words you write an App, put it into the session and run it.

Pros

* very easy to use
* keeps your application non parallel

Cons

* (possible) session (dead)locking
* seduces to mix session data with app objects
* keeps your application non parallel

+++ foomo session introduction

Foomos session is a little harder to use - a quick overview.

++++ Session data

Session data are always objects and Foomo\Session gives you Singleton / \
Multiton style access

<geshi type="php">
/**
 * a session object
 */
class User {
	/**
	 * note, that the constructor does have any non optional parameters
	 *
	 * @param string $name
	 */
	public function __construct($name = 'Mike')
	public $name;
}

// test if a class instance isset
if(!Foomo\Session::classInstanceIsset('User')) {
	// if not lock and load the session
	Foomo\Session::lockAndLoad();

	// one way
	$user = new User('Hansi');
	Foomo\Session::setClassInstance($user);

	// the other
	Foomo\Session::getClassInstance('User')->name = 'Hansi';
}

echo 
	'hello default session user ' . 
	Foomo\Session::getClassInstance('User')->name
;
</geshi>

++++ Loading session data from the right scope

This one works but does not use Foomo´s Session potential, since the session \
is permanently locked:

<geshi type="php">

class App {
	private $user;
	public function login($name, $pass)
	{
		if($pass == 'SuperSecret') {
			$this->user = new User($name);
		}
	}
	public function getUserName()
	{
		return $this->user->name;
	}
}
Foomo\Session::lockAndLoad();
$app = Foomo\Session::getClassInstance('App');
$app->login('Hansi', 'SuperSecret');

</geshi>

This one separates session data from the application and locks the session \
only when necessary:

<geshi type="php">

class App {
	private $user;
	public function login($name, $pass)
	{
		if($pass == 'SuperSecret') {
			// and this is the really cool part
			Foomo\Session::lockAndLoad();
			Foomo\Session::setClassInstance(new User($name));
			Foomo\Session::saveAndRelease();
		}
	}
	public function getUserName()
	{
		if(Foomo\Session::classInstanceIsset('User')) {
			return Foomo\Session:getClassInstance('User')->name;
		}
	}
}
$app = new App;
$app->login('Hansi', 'SuperSecret');

</geshi>


+++ foomo session example

<geshi type="php">
/**
 * just an example app
 */
class App {
	/**
	 * An incredibly powerful ORM, that you do not want to serialize in your 
	 * session, since serializing / unserializing would take forever
	 *
	 * @var SuperORM
	 */
	private $orm;
	private function login()
	{
		// lock the session and (re)load it
		Foomo\Session::lockAndLoad();
		Foomo\Session::setClassInstance($this->getOrm()->loadUser());
	}
	private function getOrm()
	{
		if(!isset($this->orm)) {
			$this->orm = new SuperORM;
		}
		return $this->orm;
	}
	public function foo()
	{
		return 
			'foo with user :: ' . 
			Foomo::Session::getClassInstance('User')
			->name;
	}
	public function run()
	{
		switch($action) {
			case 'login':
				$this->login();
				break;
		}
	}
}

$app = new App;
$app->run();

</geshi>

Cons

* more abstract concept
* more complex API
* makes your application possibly parallel

Pros

* separating session data from app objects is very natural
* no deadlocks if used right
* makes your application possibly parallel