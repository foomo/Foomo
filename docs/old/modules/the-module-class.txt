Every module is represented by a class - the module class.

+++ Module initalization

At application startup the method RadModuleYourModule::initializeModule() will be called.


**This is a good time for any task that is needed to run your module**

* extend the include path, so that vendor libs are available
<geshi type="php">
RadUtils::addIncludePaths(
	array(
		\Foomo\CORE_CONFIG_DIR_MODULES . DIRECTORY_SEPARATOR . 'moduleName' . DIRECTORY_SEPARATOR . 'vendor' . DIRECTORY_SEPARATOR . 'someLib',
		...
	)
);
</geshi>
* register auto loaders
* set up resources that always will be needed


**It is a bad time for any task that is expensive and is not nessecary every time the application is called**

+++ Module Resources

To make the installation of a module easier you can tell the system, what resources it needs to run.
<geshi type="php">
// in your module class
/**
 * get all the module resources
 *
 * @return RadModuleResource[]
 */
public static function getResources()
{
	return array(
		// get a run mode independent folder var/<runMode>/test
		\Foomo\Modules\Resource\Fs::getVarResource(\Foomo\Modules\Resource\Fs::TYPE_FOLDER, 'test'),
		// and a file in it
		\Foomo\Modules\Resource\Fs::getVarResource(\Foomo\Modules\Resource\Fs::TYPE_File, 'test' . DIRECTORY_SEPARATOR . 'someFile'),
		// request a cache resource
		\Foomo\Modules\Resource\Fs::getCacheResource(\Foomo\Modules\Resource\Fs::TYPE_FOLDER, 'navigationLeaves'),
		// a database configuration
		\Foomo\Modules\Resource\Config::getResource('yourModule', 'db')
	);
}

</geshi>

+++ Declare module depedencies

When you create a module, you will be asked for its dependencies. If you need to modifiy these later change then simply edit the array returned by RadModuleYourModule::getRequiredModules().

<geshi type="php">
// in your module class
/**
 * get a list of modules, which are required to run this one
 *
 * @return string[]
 */
public static function getRequiredModules()
{
	return array('moduleA', 'moduleB');
}
</geshi>